//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using eCommerce.Core;
using eCommerce.Services.WcfClient.Entities;
namespace eCommerce.Services.WcfClient
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IGenericCharacteristicService")]
    public interface IGenericCharacteristicService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/InsertCharacteristic", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/InsertCharacteristicResponse")]
        bool InsertCharacteristic(GenericCharacteristic characteristic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/InsertCharacteristic", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/InsertCharacteristicResponse")]
        System.Threading.Tasks.Task<bool> InsertCharacteristicAsync(GenericCharacteristic characteristic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/GetCharacteristicById", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/GetCharacteristicByIdResponse")]
        GenericCharacteristic GetCharacteristicById(long characteristicId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/GetCharacteristicById", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/GetCharacteristicByIdResponse")]
        System.Threading.Tasks.Task<GenericCharacteristic> GetCharacteristicByIdAsync(long characteristicId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/GetCharacteristicForEntity", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/GetCharacteristicForEntityRespon" +
            "se")]
        GenericCharacteristic[] GetCharacteristicForEntity(long entityId, string group);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/GetCharacteristicForEntity", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/GetCharacteristicForEntityRespon" +
            "se")]
        System.Threading.Tasks.Task<GenericCharacteristic[]> GetCharacteristicForEntityAsync(long entityId, string group);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/UpdateCharacteristic", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/UpdateCharacteristicResponse")]
        bool UpdateCharacteristic(GenericCharacteristic characteristic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/UpdateCharacteristic", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/UpdateCharacteristicResponse")]
        System.Threading.Tasks.Task<bool> UpdateCharacteristicAsync(GenericCharacteristic characteristic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/DeleteCharacteristic", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/DeleteCharacteristicResponse")]
        bool DeleteCharacteristic(GenericCharacteristic characteristic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/DeleteCharacteristic", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/DeleteCharacteristicResponse")]
        System.Threading.Tasks.Task<bool> DeleteCharacteristicAsync(GenericCharacteristic characteristic);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/SaveCharacteristic", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/SaveCharacteristicResponse")]
        bool SaveCharacteristic(EntityBase entity, string key, string value);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IGenericCharacteristicService/SaveCharacteristic", ReplyAction = "http://tempuri.org/IGenericCharacteristicService/SaveCharacteristicResponse")]
        System.Threading.Tasks.Task<bool> SaveCharacteristicAsync(EntityBase entity, string key, string value);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGenericCharacteristicServiceChannel : IGenericCharacteristicService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenericCharacteristicServiceClient : System.ServiceModel.ClientBase<IGenericCharacteristicService>, IGenericCharacteristicService
    {

        public GenericCharacteristicServiceClient()
        {
        }

        public GenericCharacteristicServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public GenericCharacteristicServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public GenericCharacteristicServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public GenericCharacteristicServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public bool InsertCharacteristic(GenericCharacteristic characteristic)
        {
            return base.Channel.InsertCharacteristic(characteristic);
        }

        public System.Threading.Tasks.Task<bool> InsertCharacteristicAsync(GenericCharacteristic characteristic)
        {
            return base.Channel.InsertCharacteristicAsync(characteristic);
        }

        public GenericCharacteristic GetCharacteristicById(long characteristicId)
        {
            return base.Channel.GetCharacteristicById(characteristicId);
        }

        public System.Threading.Tasks.Task<GenericCharacteristic> GetCharacteristicByIdAsync(long characteristicId)
        {
            return base.Channel.GetCharacteristicByIdAsync(characteristicId);
        }

        public GenericCharacteristic[] GetCharacteristicForEntity(long entityId, string group)
        {
            return base.Channel.GetCharacteristicForEntity(entityId, group);
        }

        public System.Threading.Tasks.Task<GenericCharacteristic[]> GetCharacteristicForEntityAsync(long entityId, string group)
        {
            return base.Channel.GetCharacteristicForEntityAsync(entityId, group);
        }

        public bool UpdateCharacteristic(GenericCharacteristic characteristic)
        {
            return base.Channel.UpdateCharacteristic(characteristic);
        }

        public System.Threading.Tasks.Task<bool> UpdateCharacteristicAsync(GenericCharacteristic characteristic)
        {
            return base.Channel.UpdateCharacteristicAsync(characteristic);
        }

        public bool DeleteCharacteristic(GenericCharacteristic characteristic)
        {
            return base.Channel.DeleteCharacteristic(characteristic);
        }

        public System.Threading.Tasks.Task<bool> DeleteCharacteristicAsync(GenericCharacteristic characteristic)
        {
            return base.Channel.DeleteCharacteristicAsync(characteristic);
        }

        public bool SaveCharacteristic(EntityBase entity, string key, string value)
        {
            return base.Channel.SaveCharacteristic(entity, key, value);
        }

        public System.Threading.Tasks.Task<bool> SaveCharacteristicAsync(EntityBase entity, string key, string value)
        {
            return base.Channel.SaveCharacteristicAsync(entity, key, value);
        }
    }
}
